; This file contains standard comments to include to the rulesets

[common]

header = "\
; Modifying this file:\n\
; You should not modify this file except to make bugfixes or\n\
; for other \"maintenance\".  If you want to make custom changes,\n\
; you should create a new datadir subdirectory and copy this file\n\
; into that directory, and then modify that copy.  Then use the\n\
; command \"rulesetdir <mysubdir>\" in the server to have freeciv\n\
; use your new customized file.\n\
\n\
; Note that the freeciv AI may not cope well with anything more\n\
; than minor changes.\n\
"

[typedoc]
; This section contains comments documenting different ruleset object types.

buildings = "\
\n\
; /* <-- avoid gettext warnings\n\
;\n\
; Below: The individual buildings, one per section.\n\
; (Buildings = City Improvements and Wonders)\n\
;\n\
; The actual tag used (the * in [building_*]) does not matter, except\n\
; it must be unique within this file, and it may be used in debug\n\
; output when reading this file.\n\
;\n\
; Notes:\n\
;\n\
; name          = translatable name as seen by user\n\
; rule_name     = (optional) name for savegames, rulesets etc; if not\n\
;                 present, 'name' is used. Since the name used in savegames\n\
;                 must not change, use this when renaming a building after a\n\
;                 ruleset has been released.\n\
; genus         = genus; one of:\n\
;                 \"GreatWonder\", \"SmallWonder\", \"Improvement\", \"Special\".\n\
; reqs          = requirements to build the building (see effects.ruleset\n\
;                 and README.effects for help on requirements)\n\
; graphic       = icon of improvement (used in city dialog)\n\
; graphic_alt   = alternate icon of improvement\n\
; obsolete_by   = requirements for the building to become obsolete\n\
; build_cost    = production shields required to build\n\
; upkeep        = monetary upkeep value\n\
; sabotage      = percent chance of diplomat sabotage being successful\n\
; flags         = special flag strings\n\
;\n\
; ** Building flags **\n\
; \"VisibleByOthers\"  = Anyone who can see your city knows whether it has\n\
;                      this improvement. (Great and small wonders are\n\
;                      always visible.)\n\
; \"SaveSmallWonder\"  = If you lose the city with this building in, and the\n\
;                      \"savepalace\" server setting is enabled, another will\n\
;                      be built for free in a random city.\n\
;                      Should only be used with genus \"SmallWonder\".\n\
; \"Gold\"             = Not a real building; production turned into gold\n\
;                      indefinitely (capitalization/coinage).\n\
;                      Genus should be \"Special\".\n\
; \"DisasterProof\"    = Disasters never destroy this building. Is meaningful\n\
;                      only for genus \"Improvement\" buildings as others are\n\
;                      automatically disaster proof.\n\
;\n\
; */ <-- avoid gettext warnings\n\
"

techs = "\
\n\
; /* <-- avoid gettext warnings\n\
;\n\
; Below: The individual advances, one per section.\n\
; The number can be variable, up to 196.\n\
;\n\
; The actual tag used (the * in [advance_*]) does not matter, except\n\
; it must be unique within this file, and it may be used in debug\n\
; output when reading this file.\n\
;\n\
; Notes:\n\
;\n\
; name          = translatable name as seen by user\n\
; rule_name     = (optional) name for savegames, rulesets etc; if not\n\
;                 present, 'name' is used. Since the name used in savegames\n\
;                 must not change, use this when renaming a tech after a\n\
;                 ruleset has been released.\n\
; req1, req2	= advances required before researching this one\n\
; root_req      = tech required before acquiring this tech, by any\n\
;                 means, inherited by all techs that require this tech in turn\n\
;                 unless \"None\" is given here explicitly; and you can make\n\
;                 a tech available only through the init_tech of a nation by\n\
;                 making it root_req itself.\n\
; research_reqs = requirements before researching this one. Can have non\n\
;                 tech requirements because it is a requirement vector.\n\
;                 See doc/README.effects to learn more about requirement\n\
;                 vectors.\n\
;                 Requireing a tech here in stead of in req1, req2 or\n\
;                 root_req is not supported yet.\n\
;                 Requirements that may become fulfilled during the game\n\
;                 when they weren't at the start of the game is not\n\
;                 supported yet.\n\
; flags         = special flag strings\n\
; graphic       = icon for technology\n\
; graphic_alt   = alternate icon\n\
; helptext	= optional help text string (set units ruleset for examples)\n\
; bonus_message = text seen when a player is the first to discover\n\
;                 an bonus tech. Must contain '%s' to mark place of the tech\n\
;                 gained.\n\
; cost          = if tech_cost_style is set to \"Classic+\" or \"Experimental+\",\n\
;                 this field is read for information on how much a tech\n\
;                 costs.\n\
;\n\
; Special values for req1 and req2 are \"None\" (first section below)\n\
; and \"Never\" (never available).  If only one tech is required,\n\
; it should be listed as req1.\n\
;\n\
; As well as custom flags defined above, the following flag strings are\n\
; possible:\n\
;\n\
; \"Bonus_Tech\"          = player gets extra tech if reached first\n\
; \"Bridge\"              = \"Settler\" unit types can build roads with\n\
;                         \"RequiresBridge\" flag over roads with\n\
;                         \"PreventsOtherRoads\" flag (rivers)\n\
; \"Build_Airborne\"      = from now on can build air units (for use by AI)\n\
; \"Claim_Ocean\"         = Player claims ocean tiles even if they are not\n\
;                         adjacent to border source\n\
; \"Claim_Ocean_Limited\" = Oceanic border sources claim ocean tiles even if\n\
;                         they are not adjacent to border source\n\
;\n\
; */ <-- avoid gettext warnings\n\
"

governments = "\
\n\
; /* <-- avoid gettext warnings\n\
;\n\
; Below: The individual government types, one per section.\n\
;\n\
; The actual tag used (the * in [government_*]) does not matter, except\n\
; it must be unique within this file, and it may be used in debug\n\
; output when reading this file.\n\
;\n\
; For the \"official\" rulesets, the order of these sections should not\n\
; be changed because that would break backward compatability with\n\
; savegames.  (In particular, if Fundamentalism is added to default\n\
; ruleset, should be added at end.)\n\
;\n\
; Notes on fields:\n\
;\n\
; name         = translatable name as seen by user\n\
; rule_name    = (optional) name for savegames, rulesets etc; if not\n\
;                present, 'name' is used. Since the name used in savegames\n\
;                must not change, use this when renaming a government after a\n\
;                ruleset has been released.\n\
; reqs         = requirements for this government (see README.effects)\n\
; graphic      = tag specifing preferred graphic\n\
; graphic_alt  = alternate graphics tag if preferred is not found;\n\
;                should be a standard tag if preferred is not;\n\
;                otherwise may be \"-\"\n\
; ai_better    = AI will not consider this government for use if the\n\
;                government listed here is available\n\
; ruler_titles = ruler titles by nation, \"-\" is default, and non-matched\n\
;	         nations are ignored\n\
; helptext     = optional help text string; should escape all raw newlines\n\
;	         so that xgettext parsing works\n\
;\n\
; */ <-- avoid gettext warnings\n\
"

policies = "\
\n\
; /* <-- avoid gettext warnings\n\
;\n\
; Multipliers (aka policies)\n\
;\n\
; name                    = translatable name as seen by user\n\
; rule_name               = (optional) name for savegames, rulesets etc; if not\n\
;                           present, 'name' is used. Since the name used in\n\
;                           savegames must not change, use this when renaming\n\
;                           a multiplier after a ruleset has been released.\n\
; default                 = default value (as presented in UI)\n\
; start                   = minimum value (as presented in UI)\n\
; stop                    = maximum value (as presented in UI)\n\
; step                    = minimum increase/decrease (as presented in UI)\n\
; offset                  = offset/factor control how UI values are turned\n\
; factor                  = into effect values for use in effects.ruleset.\n\
;                           effect_value = (ui_value + offset) * (factor/100)\n\
;                           Optional; by default offset=0, factor=100, so\n\
;                           that UI values are used as-is.\n\
; helptext                = optional help text string; should escape all raw\n\
;                           newlines so that xgettext parsing works\n\
;\n\
; */ <-- avoid gettext warnings\n\
"

uclasses = "\
\n\
; /* <-- avoid gettext warnings\n\
;\n\
; Unit classes\n\
; The number can be variable, up to 32\n\
; When adding new classes, remember to check effects.ruleset also.\n\
; Eg. if you divide class \'Land\' to two separate classes, you may\n\
; want add effect giving City Walls defence bonus against new class\n\
; too.\n\
;\n\
; The actual tag used (the * in [unitclass_*]) does not matter, except\n\
; it must be unique within this file, and it may be used in debug\n\
; output when reading this file.\n\
;\n\
; ** Fields **\n\
;\n\
; name                = translatable name as seen by user\n\
; rule_name           = (optional) name for savegames, rulesets etc; if not\n\
;                       present, \'name\' is used. Since the name used in savegames\n\
;                       must not change, use this when renaming a unit class after a\n\
;                       ruleset has been released.\n\
; min_speed           = Minimum speed after damage and effects (whole movement points)\n\
; hp_loss_pct         = Hitpoints lost each turn if unit not in city or native base\n\
; non_native_def_pct  = Defense power percentage applying when defending on\n\
;                       non-native terrain (such as ship in harbour)\n\
; hut_behavior        = What happens to huts when unit enters tile:\n\
;                       \"Normal\", \"Nothing\", or \"Frighten\"\n\
; flags               = List of unit class flags (from the following list; you\n\
;                       cannot add custom unit class flags)\n\
; helptext            = optional help text string; should escape all raw newlines\n\
;                       so that xgettext parsing works\n\
;\n\
; ** Unit class Flags **\n\
;\n\
; \"TerrainSpeed\"      = Units use terrain specific speed\n\
; \"TerrainDefense\"    = Units gain defense bonus from terrain\n\
; \"DamageSlows\"       = Damaged units are slowed down\n\
; \"CanOccupyCity\"     = Military units of this class can occupy enemy cities\n\
; \"Missile\"           = Unit is destroyed when it attacks\n\
; \"BuildAnywhere\"     = Unit can be built even in the middle of non-native terrain\n\
; \"Unreachable\"       = Unit can be attacked only by units explicitly listing this\n\
;                       class in its \'targets\', unless on a city or native base.\n\
;                       For class members which are transports, cargo cannot load/\n\
;                       unload except in a city or native base, unless that unit\n\
;                       explicitly lists this class in its \'embarks\'/\'disembarks\'.\n\
; \"CollectRansom\"     = Unit can collect ransom when killing lone barbarian leader\n\
; \"ZOC\"               = Unit is subject to ZOC rules. Unit type flag \"IgZOC\" can\n\
;                       override this\n\
; \"CanFortify\"        = Unit can fortify at land tiles. Unit type flag\n\
;                       \"Cant_Fortify\" can override this\n\
; \"CanPillage\"        = Unit can pillage tile infrastructure\n\
; \"DoesntOccupyTile\"  = Even if this kind of enemy unit is on tile, cities can\n\
;                       still work that tile\n\
; \"AttackNonNative\"   = Unit can attack units on non-native tiles. Unit type\n\
;                       flag \"Only_Native_Attack\" can override this\n\
; \"AttFromNonNative\"  = Unit can launch attack from non-native tile (against\n\
;                       native one)\n\
;                       This applies for both attacking from transport or\n\
;                       cities. If only some unit types of the class should\n\
;                       get this property, use type flag \"Marines\"\n\
; \"KillCitizen\"       = Upon successful attack against a city, unit kills one\n\
;                       citizen. The effect \"Unit_No_Lose_Pop\" and the server\n\
;                       setting \'killcitizen\' can disable this.\n\
;\n\
; */ <-- avoid gettext warnings\n\
"
